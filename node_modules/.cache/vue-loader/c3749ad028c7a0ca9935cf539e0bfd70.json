{"remainingRequest":"/Users/amirshakiba/Desktop/test/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/amirshakiba/Desktop/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/amirshakiba/Desktop/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/amirshakiba/Desktop/test/src/pages/Blog.vue?vue&type=template&id=501d0d46&scoped=true&","dependencies":[{"path":"/Users/amirshakiba/Desktop/test/src/pages/Blog.vue","mtime":1609176505413},{"path":"/Users/amirshakiba/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amirshakiba/Desktop/test/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/amirshakiba/Desktop/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amirshakiba/Desktop/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}